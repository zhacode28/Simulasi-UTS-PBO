/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package SimulasiUTS;

/**
 *
 * @author zahidahhanumalzahra
 */
import javax.swing.JOptionPane; 
import java.sql.Connection; 
import java.sql.DriverManager; 
import java.sql.PreparedStatement; 
import java.sql.SQLException; 
import java.sql.ResultSet;
import javax.swing.table.DefaultTableModel;



public class DataTokoBuku extends javax.swing.JFrame {

    /**
     * Creates new form HanumFrame
     */
    public DataTokoBuku() {
        initComponents();
        loadData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableData = new javax.swing.JTable();
        jButtonTambahData = new javax.swing.JButton();
        jButtonHapusData = new javax.swing.JButton();
        jButtonUpdateData = new javax.swing.JButton();
        jTextFieldJudulBuku = new javax.swing.JTextField();
        jTextFieldISBN = new javax.swing.JTextField();
        jTextFieldTahunTerbit = new javax.swing.JTextField();
        jLabelISBN = new javax.swing.JLabel();
        jLabelJudulBuku = new javax.swing.JLabel();
        jLabelTahunTerbit = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabelPenerbit = new javax.swing.JLabel();
        jTextFieldPenerbit = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTableData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTableData);

        jButtonTambahData.setText("Tambah");
        jButtonTambahData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTambahDataActionPerformed(evt);
            }
        });

        jButtonHapusData.setText("Hapus");
        jButtonHapusData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonHapusDataActionPerformed(evt);
            }
        });

        jButtonUpdateData.setText("Update");
        jButtonUpdateData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateDataActionPerformed(evt);
            }
        });

        jLabelISBN.setText("ISBN");

        jLabelJudulBuku.setText("Judul Buku");

        jLabelTahunTerbit.setText("Tahun Terbit");

        jLabel4.setText("DATA TOKO BUKU BERKAH");

        jLabelPenerbit.setText("Penerbit");

        jTextFieldPenerbit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldPenerbitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 71, Short.MAX_VALUE)
                        .addComponent(jButtonTambahData)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonUpdateData)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonHapusData))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelISBN)
                            .addComponent(jLabelJudulBuku)
                            .addComponent(jLabelTahunTerbit)
                            .addComponent(jLabelPenerbit))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldJudulBuku)
                            .addComponent(jTextFieldISBN)
                            .addComponent(jTextFieldTahunTerbit)
                            .addComponent(jTextFieldPenerbit)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addGap(57, 57, 57)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 411, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelISBN)
                            .addComponent(jTextFieldISBN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelJudulBuku)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabelTahunTerbit)
                                    .addComponent(jTextFieldTahunTerbit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabelPenerbit, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldPenerbit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jTextFieldJudulBuku, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonTambahData)
                            .addComponent(jButtonUpdateData)
                            .addComponent(jButtonHapusData))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE)
                        .addGap(70, 70, 70))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadData() {
    Connection conn = null;
    PreparedStatement ps = null;
    ResultSet rs = null;

    try {
        String url = "jdbc:postgresql://localhost:5432/TokoBuku"; 
        String user = "postgres"; 
        String password = "197300"; 
        conn = DriverManager.getConnection(url, user, password);

        String sql = "SELECT * FROM Buku"; 
        ps = conn.prepareStatement(sql);
        rs = ps.executeQuery();

        
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("ISBN");
        model.addColumn("Judul Buku");
        model.addColumn("Tahun Terbit");
        model.addColumn("Penerbit"); 

         while (rs.next()) {
            model.addRow(new Object[] {
                rs.getInt("ISBN"),
                rs.getString("JudulBuku"),
                rs.getInt("TahunTerbit"),
                rs.getString("Penerbit")
            });
        }

        jTableData.setModel(model); 
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Terjadi kesalahan: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        try {
            if (rs != null) rs.close();
            if (ps != null) ps.close();
            if (conn != null) conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}

    
    private void jButtonHapusDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHapusDataActionPerformed
                                                       
    String isbn = jTextFieldISBN.getText();

    if (isbn.isEmpty()) {
        JOptionPane.showMessageDialog(this, "ISBN harus diisi!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    Connection conn = null;
    PreparedStatement ps = null;

    try {
        // Koneksi ke database PostgreSQL TokoBuku
        String url = "jdbc:postgresql://localhost:5432/TokoBuku";
        String user = "postgres"; 
        String password = "197300"; 
        conn = DriverManager.getConnection(url, user, password);

        // Query untuk menghapus data dari tabel Buku
        String sql = "DELETE FROM Buku WHERE ISBN = ?";
        ps = conn.prepareStatement(sql);
        ps.setInt(1, Integer.parseInt(isbn));

        // Eksekusi query
        int rowsAffected = ps.executeUpdate();
        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(this, "Data berhasil dihapus!");
        } else {
            JOptionPane.showMessageDialog(this, "ISBN tidak ditemukan, tidak ada data yang dihapus.", "Error", JOptionPane.ERROR_MESSAGE);
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Terjadi kesalahan: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        try {
            if (ps != null) ps.close();
            if (conn != null) conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    
}
     loadData();

    }//GEN-LAST:event_jButtonHapusDataActionPerformed

    private void jButtonTambahDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTambahDataActionPerformed
                                                                                             
    
    String isbn = jTextFieldISBN.getText();
    String judulBuku = jTextFieldJudulBuku.getText();
    String tahunTerbit = jTextFieldTahunTerbit.getText();
    String penerbit = jTextFieldPenerbit.getText();

    // Validasi input tidak kosong
    if (isbn.isEmpty() || judulBuku.isEmpty() || tahunTerbit.isEmpty() || penerbit.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Semua field harus diisi!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    Connection conn = null;
    PreparedStatement ps = null;

    try {
        // Koneksi ke database PostgreSQL
        String url = "jdbc:postgresql://localhost:5432/TokoBuku"; 
        String user = "postgres"; 
        String password = "197300"; 
        conn = DriverManager.getConnection(url, user, password);

        // SQL query untuk memasukkan data
        String sql = "INSERT INTO Buku (ISBN, JudulBuku, TahunTerbit, Penerbit) VALUES (?, ?, ?, ?)";
        ps = conn.prepareStatement(sql);
        ps.setInt(1, Integer.parseInt(isbn)); 
        ps.setString(2, judulBuku);
        ps.setInt(3, Integer.parseInt(tahunTerbit));
        ps.setString(4, penerbit);
        
        
        // Eksekusi query
        ps.executeUpdate();
        
        // Menampilkan pesan sukses
        JOptionPane.showMessageDialog(this, "Data berhasil ditambahkan!");
        
        // Mengosongkan field setelah input
        jTextFieldISBN.setText("");
        jTextFieldJudulBuku.setText("");
        jTextFieldTahunTerbit.setText("");
        jTextFieldPenerbit.setText("");

        // Memuat ulang data ke jTableData
        loadData();
        
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Terjadi kesalahan: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        try {
            if (ps != null) ps.close();
            if (conn != null) conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }


    }//GEN-LAST:event_jButtonTambahDataActionPerformed

    private void jButtonUpdateDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateDataActionPerformed
                                                  
    // Mendapatkan input dari form
    String isbn = jTextFieldISBN.getText();
    String judulBuku = jTextFieldJudulBuku.getText();
    String tahunTerbit = jTextFieldTahunTerbit.getText();
    String penerbit = jTextFieldPenerbit.getText();

    
    // Validasi input tidak kosong
     if (isbn.isEmpty() || judulBuku.isEmpty() || tahunTerbit.isEmpty() || penerbit.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Semua field harus diisi!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    Connection conn = null;
    PreparedStatement ps = null;

    try {
        // Koneksi ke database PostgreSQL
        String url = "jdbc:postgresql://localhost:5432/TokoBuku"; 
        String user = "postgres"; 
        String password = "197300"; 
        conn = DriverManager.getConnection(url, user, password);

        // SQL query untuk update data berdasarkan NIM
         String sql = "UPDATE Buku SET JudulBuku = ?, TahunTerbit = ?, Penerbit = ? WHERE ISBN = ?";
        ps = conn.prepareStatement(sql);
        ps.setString(1, judulBuku);
        ps.setInt(2, Integer.parseInt(tahunTerbit));
        ps.setString(3, penerbit);
        ps.setInt(4, Integer.parseInt(isbn));

        
        // Eksekusi query
         int rowsUpdated = ps.executeUpdate();

        // Cek apakah data berhasil diperbarui
        if (rowsUpdated > 0) {
            JOptionPane.showMessageDialog(this, "Data berhasil diperbarui!");
        } else {
            JOptionPane.showMessageDialog(this, "ISBN tidak ditemukan, tidak ada data yang diperbarui.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        
        // Mengosongkan field setelah update
        jTextFieldISBN.setText("");
        jTextFieldJudulBuku.setText("");
        jTextFieldTahunTerbit.setText("");
        jTextFieldPenerbit.setText("");

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Terjadi kesalahan: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        try {
            if (ps != null) ps.close();
            if (conn != null) conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
            loadData();               

    }//GEN-LAST:event_jButtonUpdateDataActionPerformed

    private void jTextFieldPenerbitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldPenerbitActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldPenerbitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DataTokoBuku.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DataTokoBuku.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DataTokoBuku.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DataTokoBuku.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DataTokoBuku().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonHapusData;
    private javax.swing.JButton jButtonTambahData;
    private javax.swing.JButton jButtonUpdateData;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabelISBN;
    private javax.swing.JLabel jLabelJudulBuku;
    private javax.swing.JLabel jLabelPenerbit;
    private javax.swing.JLabel jLabelTahunTerbit;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableData;
    private javax.swing.JTextField jTextFieldISBN;
    private javax.swing.JTextField jTextFieldJudulBuku;
    private javax.swing.JTextField jTextFieldPenerbit;
    private javax.swing.JTextField jTextFieldTahunTerbit;
    // End of variables declaration//GEN-END:variables
}
